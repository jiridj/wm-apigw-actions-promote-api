{
    "apiDefinition": {
        "info": {
            "description": "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)",
            "version": "1.0.11",
            "title": "Swagger Petstore - OpenAPI 3.0",
            "termsOfService": "http://swagger.io/terms/",
            "contact": {
                "email": "apiteam@swagger.io"
            },
            "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
            }
        },
        "tags": [
            {
                "name": "pet",
                "description": "Everything about your Pets",
                "externalDocs": {
                    "description": "Find out more",
                    "url": "http://swagger.io"
                }
            },
            {
                "name": "store",
                "description": "Access to Petstore orders",
                "externalDocs": {
                    "description": "Find out more about our store",
                    "url": "http://swagger.io"
                }
            },
            {
                "name": "user",
                "description": "Operations about user"
            }
        ],
        "schemes": [],
        "security": [],
        "paths": {
            "/pet": {
                "put": {
                    "tags": [
                        "pet"
                    ],
                    "summary": "Update an existing pet",
                    "description": "Update an existing pet by Id",
                    "operationId": "updatePet",
                    "consumes": [
                        "application/xml",
                        "application/json",
                        "application/x-www-form-urlencoded"
                    ],
                    "produces": [
                        "application/xml",
                        "application/json"
                    ],
                    "responses": {
                        "200": {
                            "description": "Successful operation",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "$ref": "#/components/schemas/Pet"
                                    }
                                },
                                "application/xml": {
                                    "schema": {
                                        "type": "object",
                                        "$ref": "#/components/schemas/Pet"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid ID supplied"
                        },
                        "404": {
                            "description": "Pet not found"
                        },
                        "405": {
                            "description": "Validation exception"
                        }
                    },
                    "security": [
                        {
                            "requirements": {
                                "petstore_auth": [
                                    "write:pets",
                                    "read:pets"
                                ]
                            }
                        }
                    ],
                    "enabled": true,
                    "requestBody": {
                        "description": "Update an existent pet in the store",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Pet"
                                }
                            },
                            "application/x-www-form-urlencoded": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Pet"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Pet"
                                }
                            }
                        },
                        "required": true
                    }
                },
                "post": {
                    "tags": [
                        "pet"
                    ],
                    "summary": "Add a new pet to the store",
                    "description": "Add a new pet to the store",
                    "operationId": "addPet",
                    "consumes": [
                        "application/xml",
                        "application/json",
                        "application/x-www-form-urlencoded"
                    ],
                    "produces": [
                        "application/xml",
                        "application/json"
                    ],
                    "responses": {
                        "200": {
                            "description": "Successful operation",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "$ref": "#/components/schemas/Pet"
                                    }
                                },
                                "application/xml": {
                                    "schema": {
                                        "type": "object",
                                        "$ref": "#/components/schemas/Pet"
                                    }
                                }
                            }
                        },
                        "405": {
                            "description": "Invalid input"
                        }
                    },
                    "security": [
                        {
                            "requirements": {
                                "petstore_auth": [
                                    "write:pets",
                                    "read:pets"
                                ]
                            }
                        }
                    ],
                    "enabled": true,
                    "requestBody": {
                        "description": "Create a new pet in the store",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Pet"
                                }
                            },
                            "application/x-www-form-urlencoded": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Pet"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Pet"
                                }
                            }
                        },
                        "required": true
                    }
                },
                "enabled": true
            },
            "/pet/findByStatus": {
                "get": {
                    "tags": [
                        "pet"
                    ],
                    "summary": "Finds Pets by status",
                    "description": "Multiple status values can be provided with comma separated strings",
                    "operationId": "findPetsByStatus",
                    "produces": [
                        "application/xml",
                        "application/json"
                    ],
                    "parameters": [
                        {
                            "description": "Status values that need to be considered for filter",
                            "explode": true,
                            "in": "query",
                            "name": "status",
                            "parameterSchema": {
                                "default": "available",
                                "enum": [
                                    "available",
                                    "pending",
                                    "sold"
                                ],
                                "type": "string"
                            },
                            "required": false,
                            "style": "FORM"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "successful operation",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "$ref": "#/components/schemas/Pet"
                                        }
                                    }
                                },
                                "application/xml": {
                                    "schema": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "$ref": "#/components/schemas/Pet"
                                        }
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid status value"
                        }
                    },
                    "security": [
                        {
                            "requirements": {
                                "petstore_auth": [
                                    "write:pets",
                                    "read:pets"
                                ]
                            }
                        }
                    ],
                    "enabled": true
                },
                "enabled": true
            },
            "/pet/findByTags": {
                "get": {
                    "tags": [
                        "pet"
                    ],
                    "summary": "Finds Pets by tags",
                    "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
                    "operationId": "findPetsByTags",
                    "produces": [
                        "application/xml",
                        "application/json"
                    ],
                    "parameters": [
                        {
                            "description": "Tags to filter by",
                            "explode": true,
                            "in": "query",
                            "name": "tags",
                            "parameterSchema": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "required": false,
                            "style": "FORM"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "successful operation",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "$ref": "#/components/schemas/Pet"
                                        }
                                    }
                                },
                                "application/xml": {
                                    "schema": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "$ref": "#/components/schemas/Pet"
                                        }
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid tag value"
                        }
                    },
                    "security": [
                        {
                            "requirements": {
                                "petstore_auth": [
                                    "write:pets",
                                    "read:pets"
                                ]
                            }
                        }
                    ],
                    "enabled": true
                },
                "enabled": true
            },
            "/pet/{petId}": {
                "get": {
                    "tags": [
                        "pet"
                    ],
                    "summary": "Find pet by ID",
                    "description": "Returns a single pet",
                    "operationId": "getPetById",
                    "produces": [
                        "application/xml",
                        "application/json"
                    ],
                    "parameters": [
                        {
                            "description": "ID of pet to return",
                            "explode": false,
                            "in": "path",
                            "name": "petId",
                            "parameterSchema": {
                                "format": "int64",
                                "type": "integer"
                            },
                            "required": true,
                            "style": "SIMPLE"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "successful operation",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "$ref": "#/components/schemas/Pet"
                                    }
                                },
                                "application/xml": {
                                    "schema": {
                                        "type": "object",
                                        "$ref": "#/components/schemas/Pet"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid ID supplied"
                        },
                        "404": {
                            "description": "Pet not found"
                        }
                    },
                    "security": [
                        {
                            "requirements": {
                                "api_key": []
                            }
                        },
                        {
                            "requirements": {
                                "petstore_auth": [
                                    "write:pets",
                                    "read:pets"
                                ]
                            }
                        }
                    ],
                    "enabled": true
                },
                "post": {
                    "tags": [
                        "pet"
                    ],
                    "summary": "Updates a pet in the store with form data",
                    "operationId": "updatePetWithForm",
                    "parameters": [
                        {
                            "description": "ID of pet that needs to be updated",
                            "explode": false,
                            "in": "path",
                            "name": "petId",
                            "parameterSchema": {
                                "format": "int64",
                                "type": "integer"
                            },
                            "required": true,
                            "style": "SIMPLE"
                        },
                        {
                            "description": "Name of pet that needs to be updated",
                            "explode": true,
                            "in": "query",
                            "name": "name",
                            "parameterSchema": {
                                "type": "string"
                            },
                            "required": false,
                            "style": "FORM"
                        },
                        {
                            "description": "Status of pet that needs to be updated",
                            "explode": true,
                            "in": "query",
                            "name": "status",
                            "parameterSchema": {
                                "type": "string"
                            },
                            "required": false,
                            "style": "FORM"
                        }
                    ],
                    "responses": {
                        "405": {
                            "description": "Invalid input"
                        }
                    },
                    "security": [
                        {
                            "requirements": {
                                "petstore_auth": [
                                    "write:pets",
                                    "read:pets"
                                ]
                            }
                        }
                    ],
                    "enabled": true
                },
                "delete": {
                    "tags": [
                        "pet"
                    ],
                    "summary": "Deletes a pet",
                    "operationId": "deletePet",
                    "parameters": [
                        {
                            "explode": false,
                            "in": "header",
                            "name": "api_key",
                            "parameterSchema": {
                                "type": "string"
                            },
                            "required": false,
                            "style": "SIMPLE"
                        },
                        {
                            "description": "Pet id to delete",
                            "explode": false,
                            "in": "path",
                            "name": "petId",
                            "parameterSchema": {
                                "format": "int64",
                                "type": "integer"
                            },
                            "required": true,
                            "style": "SIMPLE"
                        }
                    ],
                    "responses": {
                        "400": {
                            "description": "Invalid pet value"
                        }
                    },
                    "security": [
                        {
                            "requirements": {
                                "petstore_auth": [
                                    "write:pets",
                                    "read:pets"
                                ]
                            }
                        }
                    ],
                    "enabled": true
                },
                "enabled": true
            },
            "/pet/{petId}/uploadImage": {
                "post": {
                    "tags": [
                        "pet"
                    ],
                    "summary": "uploads an image",
                    "operationId": "uploadFile",
                    "consumes": [
                        "application/octet-stream"
                    ],
                    "produces": [
                        "application/json"
                    ],
                    "parameters": [
                        {
                            "description": "ID of pet to update",
                            "explode": false,
                            "in": "path",
                            "name": "petId",
                            "parameterSchema": {
                                "format": "int64",
                                "type": "integer"
                            },
                            "required": true,
                            "style": "SIMPLE"
                        },
                        {
                            "description": "Additional Metadata",
                            "explode": true,
                            "in": "query",
                            "name": "additionalMetadata",
                            "parameterSchema": {
                                "type": "string"
                            },
                            "required": false,
                            "style": "FORM"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "successful operation",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "$ref": "#/components/schemas/ApiResponse"
                                    }
                                }
                            }
                        }
                    },
                    "security": [
                        {
                            "requirements": {
                                "petstore_auth": [
                                    "write:pets",
                                    "read:pets"
                                ]
                            }
                        }
                    ],
                    "enabled": true,
                    "requestBody": {
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    }
                },
                "enabled": true
            },
            "/store/inventory": {
                "get": {
                    "tags": [
                        "store"
                    ],
                    "summary": "Returns pet inventories by status",
                    "description": "Returns a map of status codes to quantities",
                    "operationId": "getInventory",
                    "produces": [
                        "application/json"
                    ],
                    "responses": {
                        "200": {
                            "description": "successful operation",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "additionalProperties": {
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "security": [
                        {
                            "requirements": {
                                "api_key": []
                            }
                        }
                    ],
                    "enabled": true
                },
                "enabled": true
            },
            "/store/order": {
                "post": {
                    "tags": [
                        "store"
                    ],
                    "summary": "Place an order for a pet",
                    "description": "Place a new order in the store",
                    "operationId": "placeOrder",
                    "consumes": [
                        "application/xml",
                        "application/json",
                        "application/x-www-form-urlencoded"
                    ],
                    "produces": [
                        "application/json"
                    ],
                    "responses": {
                        "200": {
                            "description": "successful operation",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "$ref": "#/components/schemas/Order"
                                    }
                                }
                            }
                        },
                        "405": {
                            "description": "Invalid input"
                        }
                    },
                    "enabled": true,
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Order"
                                }
                            },
                            "application/x-www-form-urlencoded": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Order"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    }
                },
                "enabled": true
            },
            "/store/order/{orderId}": {
                "get": {
                    "tags": [
                        "store"
                    ],
                    "summary": "Find purchase order by ID",
                    "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.",
                    "operationId": "getOrderById",
                    "produces": [
                        "application/xml",
                        "application/json"
                    ],
                    "parameters": [
                        {
                            "description": "ID of order that needs to be fetched",
                            "explode": false,
                            "in": "path",
                            "name": "orderId",
                            "parameterSchema": {
                                "format": "int64",
                                "type": "integer"
                            },
                            "required": true,
                            "style": "SIMPLE"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "successful operation",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "$ref": "#/components/schemas/Order"
                                    }
                                },
                                "application/xml": {
                                    "schema": {
                                        "type": "object",
                                        "$ref": "#/components/schemas/Order"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid ID supplied"
                        },
                        "404": {
                            "description": "Order not found"
                        }
                    },
                    "enabled": true
                },
                "delete": {
                    "tags": [
                        "store"
                    ],
                    "summary": "Delete purchase order by ID",
                    "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
                    "operationId": "deleteOrder",
                    "parameters": [
                        {
                            "description": "ID of the order that needs to be deleted",
                            "explode": false,
                            "in": "path",
                            "name": "orderId",
                            "parameterSchema": {
                                "format": "int64",
                                "type": "integer"
                            },
                            "required": true,
                            "style": "SIMPLE"
                        }
                    ],
                    "responses": {
                        "400": {
                            "description": "Invalid ID supplied"
                        },
                        "404": {
                            "description": "Order not found"
                        }
                    },
                    "enabled": true
                },
                "enabled": true
            },
            "/user": {
                "post": {
                    "tags": [
                        "user"
                    ],
                    "summary": "Create user",
                    "description": "This can only be done by the logged in user.",
                    "operationId": "createUser",
                    "consumes": [
                        "application/xml",
                        "application/json",
                        "application/x-www-form-urlencoded"
                    ],
                    "produces": [
                        "application/xml",
                        "application/json"
                    ],
                    "responses": {
                        "default": {
                            "description": "successful operation",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "$ref": "#/components/schemas/User"
                                    }
                                },
                                "application/xml": {
                                    "schema": {
                                        "type": "object",
                                        "$ref": "#/components/schemas/User"
                                    }
                                }
                            }
                        }
                    },
                    "enabled": true,
                    "requestBody": {
                        "description": "Created user object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/User"
                                }
                            },
                            "application/x-www-form-urlencoded": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/User"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    }
                },
                "enabled": true
            },
            "/user/createWithList": {
                "post": {
                    "tags": [
                        "user"
                    ],
                    "summary": "Creates list of users with given input array",
                    "description": "Creates list of users with given input array",
                    "operationId": "createUsersWithListInput",
                    "consumes": [
                        "application/json"
                    ],
                    "produces": [
                        "application/xml",
                        "application/json"
                    ],
                    "responses": {
                        "200": {
                            "description": "Successful operation",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "$ref": "#/components/schemas/User"
                                    }
                                },
                                "application/xml": {
                                    "schema": {
                                        "type": "object",
                                        "$ref": "#/components/schemas/User"
                                    }
                                }
                            }
                        },
                        "default": {
                            "description": "successful operation"
                        }
                    },
                    "enabled": true,
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "$ref": "#/components/schemas/User"
                                    }
                                }
                            }
                        }
                    }
                },
                "enabled": true
            },
            "/user/login": {
                "get": {
                    "tags": [
                        "user"
                    ],
                    "summary": "Logs user into the system",
                    "operationId": "loginUser",
                    "produces": [
                        "application/xml",
                        "application/json"
                    ],
                    "parameters": [
                        {
                            "description": "The user name for login",
                            "explode": true,
                            "in": "query",
                            "name": "username",
                            "parameterSchema": {
                                "type": "string"
                            },
                            "required": false,
                            "style": "FORM"
                        },
                        {
                            "description": "The password for login in clear text",
                            "explode": true,
                            "in": "query",
                            "name": "password",
                            "parameterSchema": {
                                "type": "string"
                            },
                            "required": false,
                            "style": "FORM"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "successful operation",
                            "headersV3": {
                                "X-Expires-After": {
                                    "in": "header",
                                    "description": "date in UTC when token expires",
                                    "required": false,
                                    "style": "SIMPLE",
                                    "explode": false,
                                    "parameterSchema": {
                                        "type": "string",
                                        "format": "date-time"
                                    }
                                },
                                "X-Rate-Limit": {
                                    "in": "header",
                                    "description": "calls per hour allowed by the user",
                                    "required": false,
                                    "style": "SIMPLE",
                                    "explode": false,
                                    "parameterSchema": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "string"
                                    }
                                },
                                "application/xml": {
                                    "schema": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid username/password supplied"
                        }
                    },
                    "enabled": true
                },
                "enabled": true
            },
            "/user/logout": {
                "get": {
                    "tags": [
                        "user"
                    ],
                    "summary": "Logs out current logged in user session",
                    "operationId": "logoutUser",
                    "parameters": [],
                    "responses": {
                        "default": {
                            "description": "successful operation"
                        }
                    },
                    "enabled": true
                },
                "enabled": true
            },
            "/user/{username}": {
                "get": {
                    "tags": [
                        "user"
                    ],
                    "summary": "Get user by user name",
                    "operationId": "getUserByName",
                    "produces": [
                        "application/xml",
                        "application/json"
                    ],
                    "parameters": [
                        {
                            "description": "The name that needs to be fetched. Use user1 for testing. ",
                            "explode": false,
                            "in": "path",
                            "name": "username",
                            "parameterSchema": {
                                "type": "string"
                            },
                            "required": true,
                            "style": "SIMPLE"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "successful operation",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "$ref": "#/components/schemas/User"
                                    }
                                },
                                "application/xml": {
                                    "schema": {
                                        "type": "object",
                                        "$ref": "#/components/schemas/User"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid username supplied"
                        },
                        "404": {
                            "description": "User not found"
                        }
                    },
                    "enabled": true
                },
                "put": {
                    "tags": [
                        "user"
                    ],
                    "summary": "Update user",
                    "description": "This can only be done by the logged in user.",
                    "operationId": "updateUser",
                    "consumes": [
                        "application/xml",
                        "application/json",
                        "application/x-www-form-urlencoded"
                    ],
                    "parameters": [
                        {
                            "description": "name that need to be deleted",
                            "explode": false,
                            "in": "path",
                            "name": "username",
                            "parameterSchema": {
                                "type": "string"
                            },
                            "required": true,
                            "style": "SIMPLE"
                        }
                    ],
                    "responses": {
                        "default": {
                            "description": "successful operation"
                        }
                    },
                    "enabled": true,
                    "requestBody": {
                        "description": "Update an existent user in the store",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/User"
                                }
                            },
                            "application/x-www-form-urlencoded": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/User"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    }
                },
                "delete": {
                    "tags": [
                        "user"
                    ],
                    "summary": "Delete user",
                    "description": "This can only be done by the logged in user.",
                    "operationId": "deleteUser",
                    "parameters": [
                        {
                            "description": "The name that needs to be deleted",
                            "explode": false,
                            "in": "path",
                            "name": "username",
                            "parameterSchema": {
                                "type": "string"
                            },
                            "required": true,
                            "style": "SIMPLE"
                        }
                    ],
                    "responses": {
                        "400": {
                            "description": "Invalid username supplied"
                        },
                        "404": {
                            "description": "User not found"
                        }
                    },
                    "enabled": true
                },
                "enabled": true
            }
        },
        "securityDefinitions": {},
        "definitions": {},
        "baseUriParameters": [],
        "externalDocs": [
            {
                "description": "Find out more about Swagger",
                "url": "http://swagger.io"
            }
        ],
        "servers": [
            {
                "url": "/api/v3"
            }
        ],
        "components": {
            "schemas": {
                "Address": {
                    "type": "object",
                    "properties": {
                        "city": {
                            "type": "string",
                            "example": "Palo Alto"
                        },
                        "state": {
                            "type": "string",
                            "example": "CA"
                        },
                        "street": {
                            "type": "string",
                            "example": "437 Lytton"
                        },
                        "zip": {
                            "type": "string",
                            "example": "94301"
                        }
                    },
                    "xml": {
                        "name": "address"
                    }
                },
                "ApiResponse": {
                    "type": "object",
                    "properties": {
                        "code": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "message": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "xml": {
                        "name": "##default"
                    }
                },
                "Category": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer",
                            "format": "int64",
                            "example": "1"
                        },
                        "name": {
                            "type": "string",
                            "example": "Dogs"
                        }
                    },
                    "xml": {
                        "name": "category"
                    }
                },
                "Customer": {
                    "type": "object",
                    "properties": {
                        "address": {
                            "type": "array",
                            "xml": {
                                "name": "addresses",
                                "wrapped": true
                            },
                            "items": {
                                "type": "object",
                                "$ref": "#/components/schemas/Address"
                            }
                        },
                        "id": {
                            "type": "integer",
                            "format": "int64",
                            "example": "100000"
                        },
                        "username": {
                            "type": "string",
                            "example": "fehguy"
                        }
                    },
                    "xml": {
                        "name": "customer"
                    }
                },
                "Order": {
                    "type": "object",
                    "properties": {
                        "complete": {
                            "type": "boolean"
                        },
                        "id": {
                            "type": "integer",
                            "format": "int64",
                            "example": "10"
                        },
                        "petId": {
                            "type": "integer",
                            "format": "int64",
                            "example": "198772"
                        },
                        "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": "7"
                        },
                        "shipDate": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "status": {
                            "type": "string",
                            "description": "Order Status",
                            "example": "approved",
                            "enum": [
                                "placed",
                                "approved",
                                "delivered"
                            ]
                        }
                    },
                    "xml": {
                        "name": "order"
                    }
                },
                "Pet": {
                    "required": [
                        "name",
                        "photoUrls"
                    ],
                    "type": "object",
                    "properties": {
                        "category": {
                            "type": "object",
                            "$ref": "#/components/schemas/Category"
                        },
                        "id": {
                            "type": "integer",
                            "format": "int64",
                            "example": "10"
                        },
                        "name": {
                            "type": "string",
                            "example": "doggie"
                        },
                        "photoUrls": {
                            "type": "array",
                            "xml": {
                                "wrapped": true
                            },
                            "items": {
                                "type": "string",
                                "xml": {
                                    "name": "photoUrl"
                                }
                            }
                        },
                        "status": {
                            "type": "string",
                            "description": "pet status in the store",
                            "enum": [
                                "available",
                                "pending",
                                "sold"
                            ]
                        },
                        "tags": {
                            "type": "array",
                            "xml": {
                                "wrapped": true
                            },
                            "items": {
                                "type": "object",
                                "$ref": "#/components/schemas/Tag"
                            }
                        }
                    },
                    "xml": {
                        "name": "pet"
                    }
                },
                "Tag": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "name": {
                            "type": "string"
                        }
                    },
                    "xml": {
                        "name": "tag"
                    }
                },
                "User": {
                    "type": "object",
                    "properties": {
                        "email": {
                            "type": "string",
                            "example": "john@email.com"
                        },
                        "firstName": {
                            "type": "string",
                            "example": "John"
                        },
                        "id": {
                            "type": "integer",
                            "format": "int64",
                            "example": "10"
                        },
                        "lastName": {
                            "type": "string",
                            "example": "James"
                        },
                        "password": {
                            "type": "string",
                            "example": "12345"
                        },
                        "phone": {
                            "type": "string",
                            "example": "12345"
                        },
                        "userStatus": {
                            "type": "integer",
                            "description": "User Status",
                            "format": "int32",
                            "example": "1"
                        },
                        "username": {
                            "type": "string",
                            "example": "theUser"
                        }
                    },
                    "xml": {
                        "name": "user"
                    }
                }
            },
            "requestBodies": {
                "Pet": {
                    "description": "Pet object that needs to be added to the store",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "$ref": "#/components/schemas/Pet"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "type": "object",
                                "$ref": "#/components/schemas/Pet"
                            }
                        }
                    }
                },
                "UserArray": {
                    "description": "List of user object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    }
                }
            },
            "securitySchemes": {
                "api_key": {
                    "type": "APIKEY",
                    "name": "api_key",
                    "in": "HEADER"
                },
                "petstore_auth": {
                    "type": "OAUTH2",
                    "flows": {
                        "implicit": {
                            "type": "oauth2",
                            "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",
                            "scopes": {
                                "read:pets": "read your pets",
                                "write:pets": "modify pets in your account"
                            }
                        }
                    }
                }
            }
        },
        "type": "rest"
    },
    "nativeEndpoint": [
        {
            "passSecurityHeaders": true,
            "uri": "/api/v3",
            "connectionTimeoutDuration": 0,
            "alias": false
        }
    ],
    "apiName": "Swagger Petstore - OpenAPI 3.0",
    "apiVersion": "1.0.11",
    "apiDescription": "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)",
    "maturityState": "Beta",
    "isActive": true,
    "type": "REST",
    "owner": "cli-user",
    "policies": [
        "20f7a1f9-3e0d-477f-9de3-719a3fe64a15"
    ],
    "tracingEnabled": false,
    "scopes": [],
    "publishedPortals": [],
    "creationDate": "2022-05-04 10:56:48 GMT",
    "nextVersion": "2aa356f7-5e3a-4d2d-b7f2-7175e2941124",
    "systemVersion": 1,
    "gatewayEndpoints": {},
    "deployments": [
        "APIGateway"
    ],
    "microgatewayEndpoints": [],
    "appMeshEndpoints": [],
    "id": "36edf697-18f0-4de0-8b2e-dd81fc161034"
}